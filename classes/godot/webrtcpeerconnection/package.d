/**
Interface to a WebRTC peer connection.

Copyright:
Copyright (c) 2007-2018 Juan Linietsky, Ariel Manzur.  
Copyright (c) 2014-2018 Godot Engine contributors (cf. AUTHORS.md)  
Copyright (c) 2017-2018 Godot-D contributors  

License: $(LINK2 https://opensource.org/licenses/MIT, MIT License)


*/
module godot.webrtcpeerconnection;
import std.meta : AliasSeq, staticIndexOf;
import std.traits : Unqual;
import godot.d.traits;
import godot.core;
import godot.c;
import godot.d.bind;
import godot.d.reference;
import godot.globalenums;
import godot.object;
import godot.classdb;
import godot.reference;
import godot.webrtcdatachannel;
/**
Interface to a WebRTC peer connection.

A WebRTC connection between the local computer and a remote peer. Provides an interface to connect, maintain and monitor the connection.
Setting up a WebRTC connection between two peers from now on) may not seem a trivial task, but it can be broken down into 3 main steps:
- The peer that wants to initiate the connection (`A` from now on) creates an offer and send it to the other peer (`B` from now on).
- `B` receives the offer, generate and answer, and sends it to `A`).
- `A` and `B` then generates and exchange ICE candidates with each other.
After these steps, the connection should become connected. Keep on reading or look into the tutorial for more information.
*/
@GodotBaseClass struct WebRTCPeerConnection
{
	package(godot) enum string _GODOT_internal_name = "WebRTCPeerConnection";
public:
@nogc nothrow:
	union { /** */ godot_object _godot_object; /** */ Reference _GODOT_base; }
	alias _GODOT_base this;
	alias BaseClasses = AliasSeq!(typeof(_GODOT_base), typeof(_GODOT_base).BaseClasses);
	package(godot) __gshared bool _classBindingInitialized = false;
	package(godot) static struct GDNativeClassBinding
	{
		__gshared:
		@GodotName("add_ice_candidate") GodotMethod!(GodotError, String, long, String) addIceCandidate;
		@GodotName("close") GodotMethod!(void) close;
		@GodotName("create_data_channel") GodotMethod!(WebRTCDataChannel, String, Dictionary) createDataChannel;
		@GodotName("create_offer") GodotMethod!(GodotError) createOffer;
		@GodotName("get_connection_state") GodotMethod!(WebRTCPeerConnection.ConnectionState) getConnectionState;
		@GodotName("initialize") GodotMethod!(GodotError, Dictionary) initialize;
		@GodotName("poll") GodotMethod!(GodotError) poll;
		@GodotName("set_local_description") GodotMethod!(GodotError, String, String) setLocalDescription;
		@GodotName("set_remote_description") GodotMethod!(GodotError, String, String) setRemoteDescription;
	}
	/// 
	pragma(inline, true) bool opEquals(in WebRTCPeerConnection other) const
	{ return _godot_object.ptr is other._godot_object.ptr; }
	/// 
	pragma(inline, true) typeof(null) opAssign(typeof(null) n)
	{ _godot_object.ptr = n; return null; }
	/// 
	pragma(inline, true) bool opEquals(typeof(null) n) const
	{ return _godot_object.ptr is n; }
	/// 
	size_t toHash() const @trusted { return cast(size_t)_godot_object.ptr; }
	mixin baseCasts;
	/// Construct a new instance of WebRTCPeerConnection.
	/// Note: use `memnew!WebRTCPeerConnection` instead.
	static WebRTCPeerConnection _new()
	{
		static godot_class_constructor constructor;
		if(constructor is null) constructor = _godot_api.godot_get_class_constructor("WebRTCPeerConnection");
		if(constructor is null) return typeof(this).init;
		return cast(WebRTCPeerConnection)(constructor());
	}
	@disable new(size_t s);
	/// 
	enum ConnectionState : int
	{
		/**
		The connection is new, data channels and an offer can be created in this state.
		*/
		stateNew = 0,
		/**
		The peer is connecting, ICE is in progress, none of the transports has failed.
		*/
		stateConnecting = 1,
		/**
		The peer is connected, all ICE transports are connected.
		*/
		stateConnected = 2,
		/**
		At least one ICE transport is disconnected.
		*/
		stateDisconnected = 3,
		/**
		One or more of the ICE transports failed.
		*/
		stateFailed = 4,
		/**
		The peer connection is closed (after calling $(D close) for example).
		*/
		stateClosed = 5,
	}
	/// 
	enum Constants : int
	{
		stateNew = 0,
		stateConnecting = 1,
		stateConnected = 2,
		stateDisconnected = 3,
		stateFailed = 4,
		stateClosed = 5,
	}
	/**
	Add an ice candidate generated by a remote peer (and received over the signaling server). See $(D iceCandidateCreated).
	*/
	GodotError addIceCandidate(in String media, in long index, in String name)
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.addIceCandidate, _godot_object, media, index, name);
	}
	/**
	Close the peer connection and all data channels associated with it. Note, you cannot reuse this object for a new connection unless you call $(D initialize).
	*/
	void close()
	{
		checkClassBinding!(typeof(this))();
		ptrcall!(void)(GDNativeClassBinding.close, _godot_object);
	}
	/**
	Returns a new $(D WebRTCDataChannel) (or `null` on failure) with given `label` and optionally configured via the `options` dictionary. This method can only be called when the connection is in state $(D constant STATE_NEW).
	There are two ways to create a working data channel: either call $(D createDataChannel) on only one of the peer and listen to $(D dataChannelReceived) on the other, or call $(D createDataChannel) on both peers, with the same values, and the `negotiated` option set to `true`.
	Valid `options` are:
	
	
	{
	    "negotiated": true, # When set to true (default off), means the channel is negotiated out of band. "id" must be set too. "data_channel_received" will not be called.
	    "id": 1, # When "negotiated" is true this value must also be set to the same value on both peer.
	
	    # Only one of maxRetransmits and maxPacketLifeTime can be specified, not both. They make the channel unreliable (but also better at real time).
	    "maxRetransmits": 1, # Specify the maximum number of attempt the peer will make to retransmits packets if they are not acknowledged.
	    "maxPacketLifeTime": 100, # Specify the maximum amount of time before giving up retransmitions of unacknowledged packets (in milliseconds).
	    "ordered": true, # When in unreliable mode (i.e. either "maxRetransmits" or "maxPacketLifetime" is set), "ordered" (true by default) specify if packet ordering is to be enforced.
	
	    "protocol": "my-custom-protocol", # A custom sub-protocol string for this channel.
	}
	
	
	$(B Note:) You must keep a reference to channels created this way, or it will be closed.
	*/
	Ref!WebRTCDataChannel createDataChannel(in String label, in Dictionary options = Dictionary.make())
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(WebRTCDataChannel)(GDNativeClassBinding.createDataChannel, _godot_object, label, options);
	}
	/**
	Creates a new SDP offer to start a WebRTC connection with a remote peer. At least one $(D WebRTCDataChannel) must have been created before calling this method.
	If this functions returns $(D constant OK), $(D sessionDescriptionCreated) will be called when the session is ready to be sent.
	*/
	GodotError createOffer()
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.createOffer, _godot_object);
	}
	/**
	Returns the connection state. See $(D connectionstate).
	*/
	WebRTCPeerConnection.ConnectionState getConnectionState() const
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(WebRTCPeerConnection.ConnectionState)(GDNativeClassBinding.getConnectionState, _godot_object);
	}
	/**
	Re-initialize this peer connection, closing any previously active connection, and going back to state $(D constant STATE_NEW). A dictionary of `options` can be passed to configure the peer connection.
	Valid `options` are:
	
	
	{
	    "iceServers": [
	        {
	            "urls": $(D  "stun:stun.example.com:3478" ), # One or more STUN servers.
	        },
	        {
	            "urls": $(D  "turn:turn.example.com:3478" ), # One or more TURN servers.
	            "username": "a_username", # Optional username for the TURN server.
	            "credential": "a_password", # Optional password for the TURN server.
	        }
	    ]
	}
	
	
	*/
	GodotError initialize(in Dictionary configuration = Dictionary.make())
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.initialize, _godot_object, configuration);
	}
	/**
	Call this method frequently (e.g. in $(D Node._process) or $(D Node._physicsProcess)) to properly receive signals.
	*/
	GodotError poll()
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.poll, _godot_object);
	}
	/**
	Sets the SDP description of the local peer. This should be called in response to $(D sessionDescriptionCreated).
	After calling this function the peer will start emitting $(D iceCandidateCreated) (unless an $(D error) different from $(D constant OK) is returned).
	*/
	GodotError setLocalDescription(in String type, in String sdp)
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.setLocalDescription, _godot_object, type, sdp);
	}
	/**
	Sets the SDP description of the remote peer. This should be called with the values generated by a remote peer and received over the signaling server.
	If `type` is `offer` the peer will emit $(D sessionDescriptionCreated) with the appropriate answer.
	If `type` is `answer` the peer will start emitting $(D iceCandidateCreated).
	*/
	GodotError setRemoteDescription(in String type, in String sdp)
	{
		checkClassBinding!(typeof(this))();
		return ptrcall!(GodotError)(GDNativeClassBinding.setRemoteDescription, _godot_object, type, sdp);
	}
}
